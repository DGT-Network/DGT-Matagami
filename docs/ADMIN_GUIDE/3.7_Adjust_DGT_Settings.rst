
3.7	Adjust DGT settings
+++++++++++++++++++++++++++++++

3.7.1	DGT Topology 
=============================

.. _see 4.1: ../DEV_GUIDE/4.1_REST_API.html
.. _section 2.2: ../ARCHITECTURE/2.2_DGT_Network_Topology.html
.. _see 2.2: ../ARCHITECTURE/2.2_DGT_Network_Topology.html
.. _see 3.7.1.2: 3.7_Adjust_DGT_Settings.html#port-configuration
.. _see 3.2.2: 3.2_Setup_single_Node.html#setup-dgt-single-node
.. _MiTec Json Viewer: https://www.mitec.cz/jsonv.html
.. _Section  3.1: 3.1_DGT_Environment.html

`Section  3.1`_ dealt with the installation of a single node. Each node is a set of services that interact with each other and are responsible for organizing the network, storing data, and processing transactions. Even a single node provides a significant service that supports client applications via an API (`see 4.1`_). At the same time, several the platform's network capabilities can only be used if there are several nodes. A detailed overview of DGT networking features is provided in `section 2.2`_ while below is a description of the practical setup of the DGT network. Basic concepts of topology include: 

    •	`Node`: an independent unit of the network, a set of services that support the functionality of the platform.

    •	`Cluster`: a group of nodes that jointly process transactions. In the DGT network, all nodes are included in a certain cluster. One node cannot belong to two clusters simultaneously.

    •	`Node role`: each cluster is supported by a variable leader (Leader role) that changes according to a certain rule. The nodes in the cluster perform the transaction validation (the roles of Peer, Validator). Outside the cluster, transactions are additionally checked by nodes of a special time - an Arbitrator. There are also other roles (`see 2.2`_).

    •	The initial joining of a node to the network is done through a special node-gateway that performs the initial touring of messages. 

    •	The DGT network may contain additional divisions in terms of access. Such a division is organized into network segments, which may have limited access (closed or private segments) and free access (open, public segment). Only one public segment is allowed within the DGT network. Each cluster belongs to one and only one segment. The different between closed and open segments is in different access method: a closed segment requires certificate verification and an access point (cell), while the open segment uses a dynamic topology with random access to clusters. 

    •	To manage the level of trust, there are various mechanisms for monitoring the integrity of the network: signatures for topological transactions (verifies the public-private key pair), X.509 certificate mechanism, or the formation of a trusted seed-network. Seed-network is an initial set of nodes which can interact without the use of certificates. It is assumed that this initial configuration is provided by a trust contour (`see 3.7.1.2`_).

    •	Expanding the network beyond the seed-network is carried out by connecting nodes to cells - reserved topological coordinates (cluster number / node number). Such cells are described in the preliminary system settings (`see 3.7.1.2`_).

The DGT network configuration is described through one of the two notations:

    •	System notation (node coordinates, metric notation): cluster number and node number. For example, the 1st node represented in the 1st cluster gets the name c1-1. Such a system does not take access segments into account, but has simple node addressing and is convenient for use in assembly commands (for example, `see 3.2.2`_)

    •	Extended notation (mnemonic notation), which uses the following rules: 

        •	Network segments are denoted by capital letters: A (seed-network), B, C, D… Only one of these segments may be public. 

        •	Clusters are denoted by two small Latin letters, the first of which corresponds to the segment, the second to the cluster number, for example: aa, ab, …, bc, bd, be, …, da, db, … 

        •	Nodes are identified by name of the cluster with an additional numerical index, for example aa1, aa2, ab2, ab2

         .. image:: ../images/figure_22.png
                :align: center

System notation is convenient when working with small or quasi-homogeneous networks. Large public access networks may accept mnemonic notation. Within the system, it is described by the JSON-specification «etc/dgt.net.static» The notation mapping is set in the «etc/dgt.net.map» JSON configuration file, `see 3.7.1.2`_. Basic rules for describing network objects include: 

    •	Network objects accept types: NODE, CLUSTER, SEGMENT, MAP

    •	Objects form a single hierarchy (tree), which describes each of the objects with its own attributes. The CLUSTER object contains a list of nodes located in the children list. The top-level object “genesis” is an abstract object that contains other objects. Clusters are attached to certain nodes that are the gateways into the network. 

    •	CLUSTER object attributes include:

        •	**name** (reference to gateway system name, for example, Dgt4), 
        •	**type** (cluster), 
        •	**segment** (cluster name in mnemonic notation, for example, AE), 
        •	**children** (a set of node objects, each of which has a name in notation ae1, ae2, …),
        •	**maxpeer** (optional attribute that limits the number of nodes in the cluster)
        •	**public** (optional attribute. If present and set to true, the cluster supports the dynamic topology that is typical for open/public segments).

    •	NODE object attributes include: 

        •	**name** (node name, usually related to system notation, e.g. 11)
        •	**type** (peer): selects objects of type node
        •	**role** (the role of the node, in the current version it can take the values of leader that coordinates the cluster and plink which is the validator)
        •	**genesis** (optional attribute, present only for the first node in the network and taking the value of true) 
        •	**delegate** (optional attribute, a market for the node that acts as an arbitrator) 

    •	SEGMENT attributes include: 

        •	NETWORK_WIDTH - the number of clusters in the segment allowed at any one level 
        •	NETWORK_HEIGHT - the number of clusters allowed in any one segment in depth
        •	NETWORK_ROLES - allowed roles
        •	NETWORK_CA - requirement for valid certificates to join the segment (mode=true).

    •	Attributes of the MAP object (not used, the map is moved to a separate specification of dgt.net.map type)

The platform works with topology descriptions in JSON format, which can be parsed in any suitable editor (we recommend using `MiTec Json Viewer`_ for viewing):

    .. image:: ../images/figure_23.png
            :align: center

Designing the network topology is a time-consuming process that requires significant efforts in defining parameters and dependencies between network objects. In most cases, you can use ready-made network templates (`see 3.7.1.2`_). For a short form text description, the following format can be used: 

    .. image:: ../images/table_8_02.PNG
       :align: center

3.7.1.1	DGT Topology Settings
---------------------------------------

.. _see 3.7.1.1: 3.7_Adjust_DGT_Settings.html#dgt-topology-settings

Topological settings are set in the following files located in the “etc” working directory of the current version of DGT (ex. DGT-Matagami/CORE/etc): «dgt.net.static», «dgt.net.dyn» and «dgt.net.map».  When deploying a node or cluster, the corresponding container copies the data files for cluster n and node m to the directory «dgt_clust/c_n/dgt_m» (ex. DGT-Matagami/dgt_clust/c1/dgt1).

    •	The «dgt.net.static» file contains a description of the topology (reserved cells of private segments in JSON format - a hierarchy of network objects): 

     .. image:: ../images/table_8_05.PNG
       :align: center

    •	The «dgt.net.map» file contains the rules for matching the coordinates of the node and the selected notation (for example, mnemonic), as well as a description of the seed-network: 

    •	Description of clusters in different notations, for example: «c2:{“dgt1”:”AB.ab1”,”dgt2”:AB.ab2}»;

    •	Parameter «static_map» representing dedicated seed-network nodes (static core): 

     .. image:: ../images/figure_24.png
            :align: center

    •	The «dgt.net.dyn» file defines the typical dynamic topology for nodes joining public segments. Attributes similar to «dgt.net.static» are used. 

     .. image:: ../images/figure_25.png
            :align: center

    •	A typical configuration can be replaced with pre-made templates:

     .. image:: ../images/table_8_06.PNG
       :align: center

    •	If you need to change the topology, follow this algorithm:

        •	Changing the topology requires a network restart (hard fork). Change the configuration prior to commercial exploitation of the network. 

        •	Save a backup copy of the dgt configuration files: dgt.net.static and dgt.net.map (copy with the .back extension).

        •	Select the main network parameters: number of nodes, number of clusters, clusters with limits on the number of nodes, gateways for each of the clusters (connection points), initial leaders in each cluster, the number of arbitrators, clusters with public access.

        •	Prepare a draft specification in mnemonic notation (`see 3.7.1.1`_).

        •	Open the previously saved dgt.net.static.back specification (for example, in Notepad++, Visual Studio Code or the online jsoneditoronle), edit it and save it with the desired name.

        •	Open the dgt.net.map specification and enter the rules for correlating the mnemonic notation and system coordinates; describe the nodes included into the static core of the network (seed-network) and save under a new name.

        •	Copy into the «DGT-Matagami/CORE/etc» directory and replace using the «cp» operation. 

3.7.1.2	Port Configuration
--------------------------------------------

.. _3.2.4: 3.2_Setup_single_Node.html#nodes-port-configuration
.. _see 3.3.2: 3.3_Setup_Private_Public_Network.html#a-virtual-cluster
.. _see 3.3.3.2: 3.3_Setup_Private_Public_Network.html#setup-a-physical-network
.. _see also 3.7.3: 3.7_Adjust_DGT_Settings.html#adjusting-cryptography

Section `3.2.4`_ describes ports for a single node. Each DGT node is represented by a set of services that support the operation of the node: 

    .. image:: ../images/table_8_03.PNG
        :align: center

These ports can be overridden for a given node (such that each port works with its own set of ports). This port redefinition is necessary when launching a virtual cluster, the nodes share a single IP and the corresponding ports should not conflict. The bash batch file «upDgtUpCluster.sh» sets default ports according to cluster number and node number:

    .. image:: ../images/table_8_04.PNG
        :align: center

Notes:

    •	Real ports are used only for a static kernel, for example, to run a virtual cluster (`see 3.3.2`_);

    •	When launching an external node, the NET service port can be overridden with the -P key (`see 3.3.3.2`_)

3.7.2	Manage local settings
=====================================

The platform operation parameters are set by the configuration files located in the «DGT-Matagami/CORE/etc» directory. They are then written to the DAG and synchronized:

    •	Network configuration and its topology are described in the «dgt.net.static», «dgt.net.dyn» and «dgt.net.map» files (`see 3.7.1.2`_)

    •	General settings are described in the «dgt.conf.static» file

+----+----------------------+---------------+----------------------+
| #  | Parameter            | Default Value | Description          |
+====+======================+===============+======================+
| 1  | dgt.net.time_to_live | 2             | Number of broadcasts |
|    |                      |               | for broadcast        |
|    |                      |               | messages             |
+----+----------------------+---------------+----------------------+
| 2  | dgt.ping.counter     | 0             | Counter of ping      |
|    |                      |               | requests in the      |
|    |                      |               | network topology,    |
|    |                      |               | changed by the ping  |
|    |                      |               | transaction of the   |
|    |                      |               | topology processor,  |
|    |                      |               | issued by an         |
|    |                      |               | external service to  |
|    |                      |               | check the status of  |
|    |                      |               | the node             |
+----+----------------------+---------------+----------------------+
| 3  | dgt.dag.step         | 4             | Step between DAG     |
|    |                      |               | branch points (after |
|    |                      |               | 4 blocks between     |
|    |                      |               | branches, a new      |
|    |                      |               | branch will appear)  |
+----+----------------------+---------------+----------------------+
| 4  | d                    | 0             | Defines the change   |
|    | gt.fbft.leader_shift |               | of leader in the     |
|    |                      |               | cluster (0 – not     |
|    |                      |               | allowed, 1 –         |
|    |                      |               | allowed)             |
+----+----------------------+---------------+----------------------+
| 5  | dg                   | 0             | Defines an           |
|    | t.fbft.arbiter_shift |               | arbitrator change    |
+----+----------------------+---------------+----------------------+
| 6  | dgt                  | 6             | The number of nodes  |
|    | .fbft.max_feder_peer |               | in a cluster by      |
|    |                      |               | default. Can be      |
|    |                      |               | overridden on a      |
|    |                      |               | per-cluster basis    |
|    |                      |               | with the ‘maxpeer’   |
|    |                      |               | parameter – see      |
|    |                      |               | 3.7.1.2              |
+----+----------------------+---------------+----------------------+
| 7  | d                    | 1             | Allow automatic      |
|    | gt.fbft.auto_cluster |               | creation of clusters |
|    |                      |               | (if set to 1)        |
+----+----------------------+---------------+----------------------+
| 8  | dgt.fbf              | 2             | Number of public     |
|    | t.max_public_cluster |               | clusters             |
+----+----------------------+---------------+----------------------+
| 9  | dgt.dag.max_branch   | 6             | Number of DAG        |
|    |                      |               | “colours”: by        |
|    |                      |               | default, the number  |
|    |                      |               | of colours           |
|    |                      |               | corresponds to the   |
|    |                      |               | different branches   |
|    |                      |               | of each cluster; for |
|    |                      |               | example, six (6)     |
|    |                      |               | clusters in a static |
|    |                      |               | topology (see        |
|    |                      |               | 3.7.1.2)             |
+----+----------------------+---------------+----------------------+
| 10 | dgt.con              | 6.3           | Activation of the    |
|    | sensus.block_timeout |               | block formation      |
|    |                      |               | timer                |
+----+----------------------+---------------+----------------------+
| 11 | dgt.con              | 0.01          | Minimum waiting time |
|    | sensus.min_wait_time |               | for establishing     |
|    |                      |               | consensus            |
+----+----------------------+---------------+----------------------+
| 12 | dgt.con              | 0.06          | Maximum waiting time |
|    | sensus.max_wait_time |               | for establishing     |
|    |                      |               | consensus prior to   |
|    |                      |               | start of block       |
|    |                      |               | closure, affects the |
|    |                      |               | number of            |
|    |                      |               | transactions         |
|    |                      |               | included in a block  |
+----+----------------------+---------------+----------------------+
| 13 | dgt.pu               | 0             | Packet forwarding    |
|    | blisher.send_batches |               | whether packets      |
|    |                      |               | should be            |
|    |                      |               | broadcasted to other |
|    |                      |               | nodes as soon as     |
|    |                      |               | they are received by |
|    |                      |               | the initiating node  |
+----+----------------------+---------------+----------------------+
| 14 | dgt.publisher.m      | 5             | Limit on the number  |
|    | ax_batches_per_block |               | of packets in a      |
|    |                      |               | block, compliments   |
|    |                      |               | the time limits      |
+----+----------------------+---------------+----------------------+
| 15 | dgt                  | f-bft         | f-bft consensus      |
|    | .consensus.algorithm |               |                      |
+----+----------------------+---------------+----------------------+
| 16 | d                    | 0.1           | Version of the       |
|    | gt.consensus.version |               | consensus engine     |
+----+----------------------+---------------+----------------------+
| 17 | dgt                  | 1             | Full cycle f-bft     |
|    | .consensus.pbft.full |               | when set to 1,       |
|    |                      |               | truncated (“fast”)   |
|    |                      |               | version for          |
|    |                      |               | debugging purposes   |
+----+----------------------+---------------+----------------------+
| 18 | dgt.consens          | 20            | Log size             |
|    | us.pbft.max_log_size |               |                      |
+----+----------------------+---------------+----------------------+

    •	Certificate settings are defined by the «DGT-Matagami/CORE/certificate.json» file (`see also 3.7.3`_). Certificates are used to connect to a private segment and must be edited before the node is launched for the first time. Main parameters (X.509 format) include: 

        •	COUNTRY_NAME: abbreviated name of the country in which the node is running (ex. “CA”)

        •	STATE_OR_PRIVINCE_NAME: region, for example, “ONTARIO”

        •	LOCALITY_NAME: city of place, for example “BARRIE”

        •	ORGANIZATION_NAME: the name of the organization, for example “DGT”. Leave this field set to DGT if run by an individual

        •	COMMON_NAME: mnemonic name of the node, e.g. “John's node”

        •	DNS_NAME: network name, for example, “dgt.world”

        •	EMAIL_ADDRESS: email of the site administrator, for example, “adminmail@mail.com”

        •	PSEUDONYM: server name or other ID, e.g. MTG-CORE-12.DELL.1

        	JURISDICTION_COUNTRY_NAME: name of the jurisdiction, for example, “CA”

        •	BUSINESS_CATEGORY: this field is provided when the certificate is approved by the segment owner/administrator. Leave this field unchanged for test runs. 

        •	USER_ID: network user number, this field is provided when the certificate is approved by the segment owner/administrator. Leave this field unchanged for test runs. 

Working with certificates is done through the transaction family xcert (`see 3.6`_). The certificate is created with the private and public keys in the moment of first launch (`see 3.7.3`_)

.. _see 3.7.3: 3.7_Adjust_DGT_Settings.html#adjusting-cryptography
.. _see 3.8.3: 3.8_DGT_Maintenance.html#network-performance
.. _see 3.6: 3.6_DGT_CLI_and_Base_Transaction_Families.html

    •	Monitoring system settings (Grafana, `see 3.8.3`_) are defined by configuration files in the «DGT-Matagami/CORE/etc/Grafana» directory

3.7.3	Adjusting Cryptography
==============================================

Security of DGT, just like with other blockchain platforms, depends heavily on the cryptography [1]_

    •	Cryptography is used when signing transactions during their creation and validation

    •	Addressing and local integrity of the registry is provided by cryptographic hash functions

    •	When creating a transaction, cryptographic functions may be part of creating the payload body of the transaction 

    •	Verification of nodes and other information objects can be carried out using a system of certificates

The system uses asymmetric cryptography , in which security functions are initialized by the unique public-private key pair. The scheme for their creation and application (signature) is determined by the chosen cryptography package. Two packages are currently supported, which are defined at node startup:

    •	-CB openssl (preferred cryptography package based on `OpenSSL`_)

    •	-CB bitcoin (uses the `secp256k1`_ library) 

.. _OpenSSL: https://www.openssl.org/
.. _secp256k1: https://github.com/bitcoin-core/secp256k1

Support planned for: Wolfssl, Hyperledger Ursa

When the node is launched for the first time, private and public keys are generated, as well as a certificate in the X.509 format. Keys are stored in the node's startup directory «dgt_clust/../..keys» (ex. «DGT-Matagami/dgt_clust/c1/dgt1/keys»): validator.priv, validator.pub

When performing transactions on behalf of a node, other keys can be used, which can be created by the dgt transaction family command: «dgt keygen» (`see 3.6`_). 




.. rubric:: Footnotes

.. [1] In 2017, the Sawtooth framework was subjected to a security audit. It resulted in several improvements and additions to DGT.
