#!/usr/bin/env python3

# Copyright 2020 NTRLab
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

import os
import sys
import sysconfig
import subprocess
import argparse

import logging
build_str = "lib.{}-{}.{}".format(sysconfig.get_platform(),sys.version_info.major, sys.version_info.minor)
TOP_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.realpath(__file__)))) 
sys.path.insert(0, os.path.join(TOP_DIR,'bgx','cli'))
sys.path.insert(0, os.path.join(TOP_DIR,'bgx','validator-bgx'))
sys.path.insert(0, os.path.join(TOP_DIR,'bgx','signing'))
sys.path.insert(0, os.path.join(TOP_DIR,'bgx','sdk', 'python'))
from sawtooth_sdk.processor.log import init_console_logging,log_configuration
FIFO_PATH = "/tmp/my_program.fifo"
FIFO_DIR  = "../dgt_clust/c1/bgx1/data"
FIFO_NM   = '.peers_ctrl'
LOGGER = logging.getLogger(__name__)
def parse_args(args):
    """Parse command line flags added to `rest_api` command.
    """
    parser = argparse.ArgumentParser(
        description='Starts peers control.')

    
    parser.add_argument('-P', '--peers',
                        nargs="+",
                        help='specify peers start params')
    
    parser.add_argument('-C','--clust',
                        type=str,
                        default='c1',
                        help='cluster name')
    parser.add_argument('-N','--node',
                        type=str,
                        default='1',
                        help='node name in cluster')
    parser.add_argument('-v', '--verbose',
                        action='count',
                        default=0,
                        help='enable more verbose output to stderr')
   
    return parser.parse_args(args)

def run_cmd(peers,cmd):
    
    
    try:
        args = cmd.split(' ')
        if args[0] in ['upCluster.sh','downCluster.sh']:
            LOGGER.info("ARGS {}".format(args))
            pkey = '{}.{}'.format(args[1],args[2])
            if pkey not in peers:
                LOGGER.info("Ignore not configured peer {}".format(pkey))
                return
            conf = peers[pkey].split(' ')
            if args[0] == 'upCluster.sh':
                params = ['bash',args[0]]+conf+[args[1],args[2]]
            else:
                params = ['bash',args[0],args[1],args[2]]
            print('params',params)
            
        else:
            return
        out = subprocess.Popen(params,#['bash', '-c', './'+cmd],
                             cwd='./', 
                             stdout=subprocess.PIPE, 
                             stderr=subprocess.STDOUT)
        stdo,stde = out.communicate()
        LOGGER.info("RUN stdo={} stde={}".format(stdo,stde))
        
    except Exception as ex:
        LOGGER.info("RUN error {}".format(ex))
        pass

def main_wrapper():
    # read request on start peers
    
    peers = {}
    opts = parse_args(sys.argv[1:])
    log_configuration(log_dir="./", name="peer-ctrl")
    init_console_logging(verbose_level=opts.verbose,capture_std_output=False)
    fifo_dir ='../dgt_clust/{}/bgx{}/data'.format(opts.clust,opts.node)
    pfifo = os.path.join(fifo_dir,FIFO_NM)
    LOGGER.info('fifo=%s peers=%s',pfifo,opts.peers)
    if opts.peers is None:
        LOGGER.info("Not defined peer's start params")
        return
    for peer in opts.peers:
        params = peer.split(',')
        if len(params) != 2:
            continue
        peers[params[0]] = params[1]
    LOGGER.info('peers',peers)
    try:
        os.mkfifo(pfifo)
        LOGGER.info("CREATE FIFO...")
    except FileExistsError:
        pass
    except PermissionError:
        LOGGER.info("CAN'T CREATE FIFO - Permission denied...")
        
    fifo = None
    try:
        fifo = open(pfifo, "r")
        LOGGER.info("WAITING REQUEST...")
        while True:
            for line in fifo:
                LOGGER.info("Получено: %s",line)
                run_cmd(peers,line)

    except KeyboardInterrupt:
        LOGGER.info("PRESS ^C...")
    except FileNotFoundError:
        LOGGER.info("PEER {}.{} not configured for peer's control".format(opts.clust,opts.node))
    finally:
        if fifo:
            fifo.close()
        LOGGER.info("STOP...")
    

if __name__ == '__main__':
    main_wrapper()
